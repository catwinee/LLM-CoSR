import torch
from torch_geometric.data import Data
from torch_geometric.utils import erdos_renyi_graph, subgraph
import matplotlib.pyplot as plt
import networkx as nx
import random


def random_walk_subgraph_pyg(edge_index, start_node, steps):
    """
    Generate a subgraph by performing a random walk from the start node.

    Parameters:
    edge_index (torch.Tensor): The edge index of the original graph.
    start_node (int): The starting node for the random walk.
    steps (int): Number of steps to walk.

    Returns:
    torch.Tensor: The edge index of the subgraph generated by the random walk.
    """
    current_node = start_node
    nodes_visited = {current_node}

    for _ in range(steps):
        neighbors = edge_index[1][edge_index[0] == current_node].tolist()
        if not neighbors:
            break
        next_node = random.choice(neighbors)
        nodes_visited.add(next_node)
        current_node = next_node

    nodes_visited = list(nodes_visited)
    mask = torch.tensor([node in nodes_visited for node in edge_index[0]], dtype=torch.bool)
    subgraph_edge_index = edge_index[:, mask]

    return subgraph_edge_index

if __name__ == '__main__':
    # Example usage:
    # Create a sample graph using PyG
    num_nodes = 100
    edge_index = erdos_renyi_graph(num_nodes, 0.1)
    start_node = random.choice(range(num_nodes))
    steps = 10

    # Generate subgraph
    subgraph_edge_index = random_walk_subgraph_pyg(edge_index, start_node, steps)


    # Convert edge_index to NetworkX graph for visualization
    def to_networkx(edge_index, num_nodes):
        G = nx.Graph()
        edges = edge_index.t().tolist()
        G.add_edges_from(edges)
        return G


    original_graph = to_networkx(edge_index, num_nodes)
    subgraph = to_networkx(subgraph_edge_index, num_nodes)

    # Draw the original graph and the subgraph
    plt.figure(figsize=(12, 6))

    plt.subplot(121)
    nx.draw(original_graph, with_labels=True, node_size=50, node_color="blue", alpha=0.7)
    plt.title("Original Graph")

    plt.subplot(122)
    nx.draw(subgraph, with_labels=True, node_size=50, node_color="red", alpha=0.7)
    plt.title("Random Walk Subgraph")

    plt.show()
